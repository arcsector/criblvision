### GENERAL SEARCHES ###

[Deployment Annotations]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
description = Used for annotating time-series charts on dashboards with information regarding deployments that have happened in the selected time range
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.visualizations.show = 0
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = `set_cribl_internal_log_index` source!=cribl action=deploy source="*audit.log*" \
| eval annotation_category = "deploy", annotation_label = "worker_group=".id.", commit=".version.", user=".user

### LOOKUP POPULATING SEARCHES ###

[Populate Cribl Stream Worker Lookup]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 0 * * * *
dispatch.earliest_time = -60m@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = |  tstats count WHERE `set_cribl_internal_log_index` BY host \
|  rename host AS worker\
|  join type=left left=L right=R WHERE L.worker=R.host \
    [ | mstats count(*) AS * WHERE `set_cribl_metrics_index` BY host group ]\
| rename L.worker AS worker R.group AS worker_group\
| table worker worker_group\
| where isnotnull(worker_group)\
| inputlookup cribl_stream_workers.csv append=true\
| dedup worker worker_group\
| outputlookup cribl_stream_workers.csv

### ALERTS ###

[CriblVision Alert - Blocked Destinations]
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = worker_group,host
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = `set_cribl_internal_log_index` `set_cribl_log_sourcetype` channel=output:* message="sending is blocked*" \
| stats count AS blocked_destination_count BY worker_group host\
| where blocked_destination_count > `set_alert_threshold_blocked_destinations`

[CriblVision Alert - CPU Usage Over Threshold]
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = worker_group,host
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = `set_cribl_internal_log_index` message="_raw stats" \
| bin _time span=1m \
| stats max(cpuPerc) AS cpu_pct BY _time worker_group host\
| stats count(eval(cpu_pct > `set_alert_unhealthy_cpu_usage_pct`)) AS unhealthy_cpu_usage count AS total BY worker_group host\
| eval unhealthy_cpu_usage_pct = round((unhealthy_cpu_usage / total) * 100, 2)\
| where unhealthly_cpu_usage_pct > `set_alert_threshold_unhealthy_cpu_usage_pct`

[CriblVision Alert - Cluster Communication Errors]
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = worker_group,host
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = `set_cribl_internal_log_index` channel=clustercomm level=warn OR level=error NOT message=metric*\
| stats count as cluster_communication_errors BY worker_group host\
| where cluster_communication_errors > `set_alert_threshold_cluster_communication_errors`

[CriblVision Alert - Destinations Experiencing Backpressure]
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = worker_group.host
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = `set_cribl_internal_log_index` `set_cribl_log_sourcetype` channel=output:* message="begin backpressure*" \
| stats count AS begin_backpressure_count BY worker_group host\
| where begin_backpressure_count > `set_alert_threshold_backpressure`

[CriblVision Alert - Persistent Queue Initialized]
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = worker_group,input
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = `set_cribl_internal_log_index` `set_cribl_log_sourcetype` channel=SourcePQ:* message="initializing persistent queue"\
| rex field=channel "SourcePQ:(?<input>.*)"\
| stats count BY worker_group input

[CriblVision Alert - RSS Memory Usage Within Threshold]
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = worker_group,host
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = `set_cribl_internal_log_index` message="_raw stats" \
| bin _time span=1m \
| stats max(mem.rss) AS mem_rss BY _time worker_group host\
| stats count(eval(mem_rss > `set_alert_lower_limit_unhealthy_memory_usage_mb` AND mem_rss <= `set_alert_upper_limit_unhealthy_memory_usage_mb`)) AS unhealthy_memory_rss_usage count AS total BY worker_group host\
| eval unhealthy_memory_rss_usage_pct = round(( unhealthy_memory_rss_usage / total) * 100, 2)\
| where unhealthy_memory_rss_usage_pct > `set_alert_threshold_unhealthy_memory_usage_mb_pct`

[CriblVision Alert - Unhealthy Destinations]
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = group,output
alert.suppress.period = 60s
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = | mstats max(`set_cribl_metrics_prefix(health.outputs)`) AS health WHERE `set_cribl_metrics_index` `set_alert_ignored_destinations` BY output group span=1m \
| stats count(eval(health == 2)) AS troubled_count count AS total BY group output\
| eval unhealthy_pct = (troubled_count / total) * 100\
| where unhealthy_pct > `set_alert_threshold_unhealthy_destinations_pct`

[CriblVision Alert - Unhealthy Sources]
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = group,input
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = | mstats max(`set_cribl_metrics_prefix(health.inputs)`) AS health WHERE `set_cribl_metrics_index` `set_alert_ignored_sources` BY input group span=1m \
| stats count(eval(health == 2)) AS troubled_count count AS total BY group input\
| eval unhealthy_pct = (troubled_count / total) * 100\
| where unhealthy_pct > `set_alert_threshold_unhealthy_sources_pct`

[CriblVision Alert - Worker Process Restarted]
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = worker_group,host
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = `set_cribl_internal_log_index` `set_cribl_log_sourcetype` message="restarting worker process"\
| stats count AS worker_process_restarts BY worker_group host\
| where worker_process_restarts > `set_alert_threshold_worker_process_restarts`

[CriblVision Alert - No Input From Sources]
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = group,input
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = | mstats max(`set_cribl_metrics_prefix(health.inputs)`) AS health WHERE `set_cribl_metrics_index` `set_alert_ignored_sources` span=1m BY input group \
| fillnull value=0 in_events \
| stats count(eval(in_events == 0)) AS no_events count AS total BY group input\
| eval no_events_pct = round((no_events / total) * 100, 2)\
| where no_events_pct > `set_alert_threshold_no_source_thruput_pct`

[CriblVision Alert - No Output From Destinations]
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = group,output
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = | mstats sum(`set_cribl_metrics_prefix(total.out_events)`) AS out_events max(`set_cribl_metrics_prefix(health.outputs)`) AS health WHERE `set_cribl_metrics_index` `set_alert_ignored_destinations` span=1m BY output group \
| fillnull value=0 out_events \
| stats count(eval(out_events == 0)) AS no_events count AS total BY group output\
| eval no_events_pct = round((no_events / total) * 100, 2)\
| where no_events_pct > `set_alert_threshold_no_destination_thruput_pct`
